const w4 = @import("wasm4.zig");
const w4_ext = @import("wasm4_ext.zig");

const std = @import("std");

const util = @import("util.zig");
const count_digits_fast = util.count_digits_fast;
const NumberDigitIterator = util.NumberDigitIterator;
const StaticList = util.StaticList;

const world = @import("world.zig");

pub const screen_px_width = w4.SCREEN_SIZE;
pub const screen_px_height = w4.SCREEN_SIZE;
pub const tile_px_width = 10;
pub const tile_px_height = 9;
pub const world_px_width = tile_px_width * screen_px_width;
pub const world_px_height = tile_px_width * screen_px_height;
pub const max_sprites = 64;
pub const move_animation_frames = 3;

pub var frame_counter: usize = 0;

pub const ScreenPosition = struct {
    x: i32,
    y: i32,

    pub fn add(self: @This(), other: @This()) @This() {
        return .{
            .x = self.x + other.x,
            .y = self.y + other.y,
        };
    }

    pub fn sub(self: @This(), other: @This()) @This() {
        return .{
            .x = self.x - other.x,
            .y = self.y - other.y,
        };
    }
};

pub fn init() void {
    w4.PALETTE.* = .{
        0x211e20,
        0x494f5b,
        0x808070,
        0xe9efec,
    };
}

pub fn world_to_screen(location: world.Location) ScreenPosition {
    return .{
        .x = location.x * tile_px_width + screen_px_width / 2,
        .y = location.y * tile_px_height + screen_px_height / 2,
    };
}

pub fn screen_to_world(position: ScreenPosition) world.Location {
    return .{
        .x = @intCast(i16, @divTrunc(position.x - screen_px_width / 2, tile_px_width)),
        .y = @intCast(i16, @divTrunc(position.y - screen_px_height / 2, tile_px_height)),
    };
}

pub fn lerp(
    from: world.Location,
    to: world.Location,
    animation_frame: usize,
    total_frames: usize,
) ScreenPosition {
    var screen_pos = world_to_screen(from);
    const target_screen_pos = world_to_screen(to);
    const dt = @intToFloat(f32, animation_frame) / @intToFloat(f32, total_frames);
    const dx = target_screen_pos.x - screen_pos.x;
    const dy = target_screen_pos.y - screen_pos.y;
    screen_pos.x += @floatToInt(i32, @intToFloat(f32, dx) * dt);
    screen_pos.y += @floatToInt(i32, @intToFloat(f32, dy) * dt);
    return screen_pos;
}

pub const Sprite = struct {
    texture: Texture,
    draw_colours: u16,
    location: world.Location,
    target_location: world.Location = world.Location{ .x = 0, .y = 0 },
    flip_x: bool = false,
    casts_shadow: bool = false,
    decoration_texture: ?Texture = null,
};

pub const SpriteList = StaticList(Sprite, max_sprites);

pub fn sprite_list_draw(
    sprite_list: *SpriteList,
    camera_position: ScreenPosition,
    animation_frame: usize,
    visibilty_map: anytype,
) void {
    for (sprite_list.all()) |sprite| {
        const screen_pos = lerp(
            sprite.location,
            sprite.target_location,
            animation_frame,
            move_animation_frames,
        ).sub(camera_position);
        if (world.map_get_tile(
            visibilty_map,
            screen_to_world(screen_pos.add(camera_position)),
        ) > 0) {
            w4.DRAW_COLORS.* = sprite.draw_colours;
            var flags = w4.BLIT_1BPP;
            if (sprite.flip_x) flags |= w4.BLIT_FLIP_X;
            w4.blit(
                sprite.texture.bytes,
                screen_pos.x + (tile_px_width - sprite.texture.width) / 2,
                screen_pos.y - sprite.texture.height / 2,
                sprite.texture.width,
                sprite.texture.height,
                flags,
            );
        }
    }
}

pub fn sprite_list_draw_shadows(
    sprite_list: *SpriteList,
    camera_position: ScreenPosition,
    animation_frame: usize,
    visibilty_map: anytype,
) void {
    for (sprite_list.all()) |sprite| {
        if (sprite.casts_shadow) {
            const screen_pos = lerp(
                sprite.location,
                sprite.target_location,
                animation_frame,
                move_animation_frames,
            ).sub(camera_position);
            if (world.map_get_tile(
                visibilty_map,
                screen_to_world(screen_pos.add(camera_position)),
            ) > 0) {
                w4.DRAW_COLORS.* = 0x11;
                w4.oval(
                    screen_pos.x + 2,
                    screen_pos.y + tile_px_height / 2,
                    tile_px_width - 4,
                    2,
                );
            }
        }
    }
}

pub fn sprite_list_draw_decorations(
    sprite_list: *SpriteList,
    camera_position: ScreenPosition,
    animation_frame: usize,
    visibilty_map: anytype,
) void {
    for (sprite_list.all()) |sprite| {
        if (sprite.decoration_texture) |decoration_texture| {
            const screen_pos = lerp(
                sprite.location,
                sprite.target_location,
                animation_frame,
                move_animation_frames,
            ).sub(camera_position);
            if (world.map_get_tile(
                visibilty_map,
                screen_to_world(screen_pos.add(camera_position)),
            ) > 0) {
                w4.DRAW_COLORS.* = 0x40;
                w4.blit(
                    decoration_texture.bytes,
                    screen_pos.x + (tile_px_width - decoration_texture.width) / 2,
                    screen_pos.y - decoration_texture.height,
                    decoration_texture.width,
                    decoration_texture.height,
                    w4.BLIT_1BPP,
                );
            }
        }
    }
}

pub fn draw_world(state: anytype, camera_position: ScreenPosition) void {
    var location: world.Location = .{ .x = 0, .y = 0 };
    while (location.x < world.size_x) : (location.x += 1) {
        defer location.y = 0;
        while (location.y < world.size_y) : (location.y += 1) {
            switch (world.map_get_tile_kind(state.world_map, location)) {
                .wall, .secret_path => {},
                .door => {
                    w4.DRAW_COLORS.* = 0x30;
                    const screen_pos = world_to_screen(location).sub(camera_position);
                    w4.blit(
                        Texture.door.bytes,
                        screen_pos.x + 1,
                        screen_pos.y + (tile_px_width - Texture.door.width),
                        Texture.door.width,
                        Texture.door.height,
                        w4.BLIT_1BPP,
                    );
                },
                else => {
                    if (world.map_get_tile(state.world_vis_map, location) > 0) {
                        // TODO(hazeycode): optimise floor drawing by deferring and rendering contiguous blocks
                        w4.DRAW_COLORS.* = 0x33;
                        const screen_pos = world_to_screen(location).sub(camera_position);
                        w4.rect(screen_pos.x, screen_pos.y, tile_px_width, tile_px_height);
                    }
                },
            }
        }
    }
}

pub fn draw_tile_markers(state: anytype, camera_position: ScreenPosition) void {
    var i: usize = 0;
    while (i < state.action_targets.length) : (i += 1) {
        const target = state.action_targets.get(i) catch {
            w4.tracef("error: failed to get action target %d", i);
            unreachable;
        };
        const screen_pos = world_to_screen(target).sub(camera_position);
        w4.DRAW_COLORS.* = 0x4444;
        w4.line(
            screen_pos.x,
            screen_pos.y + tile_px_height / 2 - 1,
            screen_pos.x + tile_px_width / 2 - 1,
            screen_pos.y,
        );
        w4.line(
            screen_pos.x + tile_px_width / 2,
            screen_pos.y,
            screen_pos.x + tile_px_width - 1,
            screen_pos.y + tile_px_height / 2 - 1,
        );
        w4.line(
            screen_pos.x + tile_px_width - 1,
            screen_pos.y + tile_px_height / 2 - 1,
            screen_pos.x + tile_px_width / 2,
            screen_pos.y + tile_px_height - 2,
        );
        w4.line(
            screen_pos.x + tile_px_width / 2 - 1,
            screen_pos.y + tile_px_height - 2,
            screen_pos.x,
            screen_pos.y + tile_px_height / 2 - 1,
        );
    }
}

pub fn draw_hud(state: anytype, camera_position: ScreenPosition) void {
    if (state.turn_state == .aim) {
        w4.DRAW_COLORS.* = 0x04;

        if (state.action_targets.length == 0) {
            w4.text("NO TARGETS", 1, w4.SCREEN_SIZE - (8 + 1) * 2);
        } else {
            w4.text("AIM", 1, w4.SCREEN_SIZE - (8 + 1) * 2);

            const active_target = state.action_targets.get(state.action_target) catch {
                w4.trace("error: failed to get active action target");
                unreachable;
            };

            const screen_pos = world_to_screen(active_target).sub(camera_position);

            w4.hline(
                screen_pos.x - 1,
                screen_pos.y - tile_px_height / 2,
                tile_px_width + 2,
            );
            w4.hline(
                screen_pos.x - 1,
                screen_pos.y + tile_px_height - 1,
                tile_px_width + 2,
            );
            w4.vline(
                screen_pos.x - 1,
                screen_pos.y - tile_px_height / 2,
                tile_px_height + tile_px_height / 2,
            );
            w4.vline(
                screen_pos.x + tile_px_width,
                screen_pos.y - tile_px_height / 2,
                tile_px_height + tile_px_height / 2,
            );
        }
    }

    { // draw health bar
        w4.DRAW_COLORS.* = 0x40;

        const piece_width: u16 = 8;
        const piece_height: u16 = 8;
        if (state.player.entity.health > 0) {
            const width: u16 = @bitCast(u8, state.player.entity.health) * piece_width;
            const y = @intCast(i32, w4.SCREEN_SIZE) - piece_height - 1;
            var x: i32 = @intCast(i32, w4.SCREEN_SIZE) - width - 1;
            var i: usize = 0;
            while (i < state.player.entity.health) : (i += 1) {
                w4.blit(
                    Texture.heart.bytes,
                    x,
                    y,
                    piece_width,
                    piece_height,
                    w4.BLIT_1BPP,
                );
                x += piece_width;
            }
        }
    }

    { // draw active item
        w4.DRAW_COLORS.* = 0x04;
        const str = switch (state.player.active_item) {
            .fists => "FISTS",
            .sword => "SWORD",
            .small_axe => "THROWING AXE",
        };
        w4.text(str, 1, w4.SCREEN_SIZE - 8 - 1);
    }
}

pub fn draw_screen_title(title_text: []const u8) void {
    w4.DRAW_COLORS.* = 0x04;
    w4_ext.text_centered(title_text, @divTrunc(w4.SCREEN_SIZE, 4));
}

pub fn draw_stats(stats: anytype) void {
    {
        const postfix = " turns taken";
        const y = w4.SCREEN_SIZE / 3 * 2;
        const w = 8 * (count_digits_fast(stats.turns_taken) + 1 + postfix.len);
        var x = @intCast(i32, w4.SCREEN_SIZE / 2 - w / 2);
        x += draw_text_number(stats.turns_taken, x, y);
        x += 8;
        w4.text(postfix, x, y);
    }

    // {
    //     const y = w4.SCREEN_SIZE / 2 + 1;
    //     var x: i32 = 10;

    //     if (stats.elapsed_m > 99) {
    //         w4.text("> 99 minutes elapsed !?", x, y);
    //     } else {
    //         x += draw_text_number(@intCast(i32, stats.elapsed_m), x, y);
    //         w4.text(":", x, y);
    //         x += 8;
    //         x += draw_text_number(@intCast(i32, stats.elapsed_s), x, y);
    //         w4.text(" elapsed", x, y);
    //     }
    // }
}

pub fn draw_menu_bg() void {
    const bg = Texture.title_screen_bg;
    w4.DRAW_COLORS.* = 0x2321;
    w4.blit(bg.bytes, 0, 0, bg.width, bg.height, w4.BLIT_2BPP);
}

pub fn draw_title_menu() void {
    draw_menu_bg();

    w4.DRAW_COLORS.* = 0x04;
    w4_ext.text_centered("Escape Guldur", @divTrunc(w4.SCREEN_SIZE, 2) - 8);
    w4.text("\x80 START", 16, w4.SCREEN_SIZE - (8 + 4) * 2);
    w4.text("\x81 CONTROLS", 16, w4.SCREEN_SIZE - (8 + 4));
}

pub fn draw_controls() void {
    draw_menu_bg();
    draw_transparent_overlay();

    w4.DRAW_COLORS.* = 0x04;
    w4_ext.text_centered("CONTROLS", 12);
    w4.text("\x84\x85\x86\x87 move /", 10, 50 + (8 + 1) * 0);
    w4.text("     change target", 10, 50 + (8 + 1) * 1);
    w4.text("\x80 aim item /", 10, 50 + (8 + 1) * 4);
    w4.text("  use item", 10, 50 + (8 + 1) * 5);
    w4.text("\x81 cycle item /", 10, 50 + (8 + 1) * 8);
    w4.text("  cancel aim", 10, 50 + (8 + 1) * 9);
}

pub fn draw_reload_screen(state: anytype, menu_option: *u8) void {
    // TODO(hazeycode): rewrite
    w4.DRAW_COLORS.* = 0x04;
    var y: i32 = 12;
    w4_ext.text_centered("RELOAD", y);
    y += 8 * 3;
    if (state.level >= 5) {
        w4_ext.text_centered(
            if (menu_option.* == 5) "> Level 6 <" else "Level 6",
            y,
        );
        y += 8 + 4;
    }
    if (state.level >= 4) {
        w4_ext.text_centered(
            if (menu_option.* == 4) "> Level 5 <" else "Level 5",
            y,
        );
        y += 8 + 4;
    }
    if (state.level >= 3) {
        w4_ext.text_centered(
            if (menu_option.* == 3) "> Level 4 <" else "Level 4",
            y,
        );
        y += 8 + 4;
    }
    if (state.level >= 2) {
        w4_ext.text_centered(
            if (menu_option.* == 2) "> Level 3 <" else "Level 3",
            y,
        );
        y += 8 + 4;
    }
    if (state.level >= 1) {
        w4_ext.text_centered(
            if (menu_option.* == 1) "> Level 2 <" else "Level 2",
            y,
        );
        y += 8 + 4;
    }
    if (state.level >= 0) {
        w4_ext.text_centered(
            if (menu_option.* == 0) "> Level 1 <" else "Level 1",
            y,
        );
        y += 8 + 4;
    }
}

pub fn draw_text_number(number: anytype, x: i32, y: i32) u16 {
    var dx: u16 = 0;

    if (number < 0) {
        w4.text("-", x + dx, y);
    }

    const number_abs = @intCast(
        u32,
        if (number < 0) -number else number,
    );

    var digit_iter = NumberDigitIterator(u32).init(number_abs);
    while (digit_iter.next()) |digit| {
        dx += 8;
        w4.text(&[_]u8{'0' + digit}, x + dx, y);
    }

    return dx;
}

pub fn draw_transparent_overlay() void {
    w4.DRAW_COLORS.* = 0x01;
    var i: i32 = 0;
    while (i < w4.SCREEN_SIZE) : (i += 2) {
        w4.line(i, 0, 0, i);
    }
    i = 1;
    while (i < w4.SCREEN_SIZE) : (i += 2) {
        w4.line(w4.SCREEN_SIZE - 1, i, i, w4.SCREEN_SIZE - 1);
    }
}

pub const Texture = struct {
    bytes: [*]const u8,
    width: u16,
    height: u16,
    bpp: u8,

    pub const alert_marker = @This(){
        .bytes = &[6]u8{
            0b00000100,
            0b00000100,
            0b00000100,
            0b00000000,
            0b00000100,
            0b00000000,
        },
        .width = 8,
        .height = 6,
        .bpp = 1,
    };

    pub const door = @This(){
        .bytes = &[10]u8{
            0b00111100,
            0b01111110,
            0b01111110,
            0b11111111,
            0b11111111,
            0b11111111,
            0b11111111,
            0b00000000,
            0b00000000,
            0b00000000,
        },
        .width = 8,
        .height = 10,
        .bpp = 1,
    };

    pub const player = @This(){
        .bytes = &[10]u8{
            0b00011000,
            0b00011000,
            0b00111000,
            0b01111100,
            0b10111100,
            0b10111010,
            0b00111000,
            0b00101100,
            0b00100100,
            0b00100100,
        },
        .width = 8,
        .height = 10,
        .bpp = 1,
    };

    pub const monster = @This(){
        .bytes = &[10]u8{
            0b00000000,
            0b00000001,
            0b00000001,
            0b00011001,
            0b00011001,
            0b00111101,
            0b01011011,
            0b01011001,
            0b00100100,
            0b00100100,
        },
        .width = 8,
        .height = 10,
        .bpp = 1,
    };

    pub const fire_monster = @This(){
        .bytes = &[8]u8{
            0b00100100,
            0b01011010,
            0b01111110,
            0b11111011,
            0b10111111,
            0b10111010,
            0b00101000,
            0b00101000,
        },
        .width = 8,
        .height = 8,
        .bpp = 1,
    };

    pub const charge_monster = @This(){
        .bytes = &[8]u8{
            0b00000000,
            0b00011100,
            0b00111110,
            0b01111111,
            0b11111111,
            0b11111110,
            0b00100010,
            0b00010001,
        },
        .width = 8,
        .height = 8,
        .bpp = 1,
    };

    pub const fire_small = @This(){
        .bytes = &[8]u8{
            0b00000000,
            0b00000100,
            0b01000000,
            0b00001000,
            0b00011000,
            0b00110100,
            0b01111000,
            0b00000000,
        },
        .width = 8,
        .height = 8,
        .bpp = 1,
    };

    pub const fire_big = @This(){
        .bytes = &[8]u8{
            0b00100000,
            0b00001000,
            0b00011000,
            0b00110100,
            0b01100110,
            0b11111110,
            0b01111100,
            0b00000000,
        },
        .width = 8,
        .height = 8,
        .bpp = 1,
    };

    pub const heart = @This(){
        .bytes = &[8]u8{
            0b00000000,
            0b00110110,
            0b01111111,
            0b01111111,
            0b01111111,
            0b00111110,
            0b00011100,
            0b00001000,
        },
        .width = 8,
        .height = 8,
        .bpp = 1,
    };

    pub const sword = @This(){
        .bytes = &[8]u8{
            0b00000000,
            0b00000010,
            0b00000110,
            0b00001100,
            0b01011000,
            0b00110000,
            0b01010000,
            0b10000000,
        },
        .width = 8,
        .height = 8,
        .bpp = 1,
    };

    pub const small_axe = @This(){
        .bytes = &[8]u8{
            0b00000000,
            0b00001100,
            0b00011111,
            0b00001110,
            0b00010100,
            0b00100000,
            0b01000000,
            0b00000000,
        },
        .width = 8,
        .height = 8,
        .bpp = 1,
    };

    pub const title_screen_bg = @This(){
        .width = 160,
        .height = 160,
        .bpp = 2,
        .bytes = &[6400]u8{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x04, 0x00, 0x05, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00, 0x00, 0x50, 0x00, 0x00, 0x15, 0x55, 0x55, 0x40, 0x00, 0x00, 0x00, 0x01, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x40, 0x05, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x04, 0x00, 0x55, 0x00, 0x00, 0x41, 0x55, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x01, 0x40, 0x15, 0x45, 0x56, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x54, 0x15, 0x55, 0x54, 0x01, 0x45, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x50, 0x00, 0x01, 0x50, 0x05, 0x15, 0x56, 0xa5, 0x55, 0x55, 0x55, 0x55, 0x55, 0x50, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x55, 0x56, 0xa9, 0x66, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x01, 0x55, 0x05, 0x50, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x15, 0x45, 0x55, 0x56, 0xaa, 0xaa, 0xa9, 0x55, 0x95, 0x65, 0x55, 0x55, 0x15, 0x51, 0x15, 0x55, 0x05, 0x50, 0x40, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x15, 0x01, 0x55, 0x5a, 0xae, 0xaa, 0xaa, 0xaa, 0x96, 0x55, 0x56, 0x54, 0x54, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x54, 0x00, 0x05, 0x55, 0x55, 0x6a, 0xaf, 0xeb, 0xab, 0xfa, 0x59, 0x65, 0x6a, 0xe5, 0x55, 0x50, 0x01, 0x54, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x01, 0x15, 0x55, 0xaf, 0xff, 0xef, 0xaf, 0xfe, 0xaa, 0xa9, 0xaf, 0xff, 0x95, 0x50, 0x51, 0x10, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x11, 0x50, 0x00, 0x05, 0x55, 0x55, 0xab, 0xfa, 0xff, 0xff, 0xff, 0xfe, 0xba, 0xaf, 0xff, 0x95, 0x54, 0x14, 0x10, 0x55, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x15, 0x55, 0x00, 0x55, 0x55, 0x56, 0xaa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xa9, 0x55, 0x44, 0x15, 0x15, 0x50, 0x01, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x15, 0x55, 0x41, 0x05, 0x15, 0x56, 0xab, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0x95, 0x55, 0x15, 0x55, 0x54, 0x51, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x15, 0x55, 0x55, 0x51, 0x05, 0x5a, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x95, 0x55, 0x55, 0x01, 0x55, 0x50, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, 0x15, 0x55, 0x55, 0x55, 0x55, 0x6a, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x95, 0x54, 0x55, 0x41, 0x55, 0x40, 0x54, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x10, 0x01, 0x40, 0x55, 0x55, 0x55, 0x56, 0xaa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0x95, 0x55, 0x51, 0x50, 0x55, 0x50, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x01, 0x41, 0x55, 0x55, 0x55, 0x5a, 0xaf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xea, 0xbf, 0xff, 0xaa, 0xa5, 0x55, 0x55, 0x55, 0x55, 0x50, 0x11, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x55, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x15, 0x01, 0x55, 0x55, 0x55, 0x6a, 0xab, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xff, 0xea, 0xff, 0xff, 0xaa, 0xaa, 0x55, 0x55, 0x55, 0x55, 0x54, 0x10, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x04, 0x00, 0x00, 0x50, 0x04, 0x00, 0x01, 0x00, 0x15, 0x51, 0x55, 0x6a, 0x95, 0x6a, 0xab, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xbf, 0xfa, 0xff, 0xff, 0xaa, 0xaa, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00, 0x00, 0x05, 0x40, 0x00, 0x00, 0x00, 0x00, 0x50, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x55, 0x55, 0x96, 0xa5, 0xaa, 0xab, 0xff, 0xff, 0xff, 0xff, 0xeb, 0xff, 0xfe, 0xbf, 0xff, 0xfa, 0xaa, 0x95, 0x55, 0x55, 0x55, 0x55, 0x54, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x41, 0x55, 0x55, 0x6a, 0xaa, 0xaa, 0xaa, 0xaf, 0xbb, 0xff, 0xff, 0x6b, 0xff, 0xea, 0xbf, 0xff, 0xfa, 0xaa, 0x95, 0x55, 0x55, 0x55, 0x55, 0x54, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x55, 0x55, 0x6a, 0xaa, 0xaa, 0xaa, 0xab, 0xea, 0xff, 0xfe, 0x27, 0xff, 0xea, 0xbf, 0xff, 0xfa, 0xaa, 0x95, 0x55, 0x55, 0x55, 0x55, 0x55, 0x50, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x40, 0x00, 0x55, 0x55, 0x6a, 0xaa, 0xaa, 0xaa, 0xab, 0xfb, 0xff, 0xff, 0x17, 0xff, 0xda, 0xbf, 0xff, 0xfa, 0xaa, 0x95, 0x55, 0x55, 0x55, 0x55, 0x51, 0x00, 0x15, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x04, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x55, 0x5a, 0x6a, 0x5a, 0xaa, 0xaa, 0xab, 0xff, 0xff, 0xfe, 0x16, 0xff, 0xd5, 0x7f, 0xff, 0xfa, 0xaa, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x40, 0x55, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x55, 0x5a, 0xaa, 0x6a, 0xaa, 0xaa, 0xaf, 0xaf, 0xff, 0xfe, 0x06, 0xff, 0xd5, 0x7f, 0xff, 0xee, 0xaa, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x45, 0x40, 0x00, 0x00, 0x01, 0x00, 0x15, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x01, 0x55, 0x5a, 0x5a, 0xaa, 0xaa, 0xaa, 0xaa, 0xaf, 0xff, 0xfe, 0x11, 0xff, 0xd5, 0x7f, 0xff, 0xfe, 0xaa, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x14, 0x00, 0x00, 0x00, 0x05, 0x40, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x45, 0x55, 0xa9, 0x56, 0x5a, 0xba, 0xaa, 0xaf, 0xab, 0xff, 0xfe, 0x05, 0xff, 0xd5, 0x2f, 0xff, 0xfe, 0xaa, 0x55, 0x55, 0x55, 0x69, 0x55, 0x55, 0x40, 0x00, 0x00, 0x00, 0x00, 0x04, 0x50, 0x55, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x55, 0x55, 0xa5, 0x56, 0x5a, 0xba, 0xaa, 0xab, 0xfb, 0xff, 0xfe, 0x11, 0xff, 0xd5, 0x2f, 0xff, 0xfe, 0xaa, 0x55, 0x55, 0x55, 0x59, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x55, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01, 0x55, 0x55, 0xa5, 0x69, 0x5a, 0xaa, 0xaa, 0xaa, 0xab, 0xff, 0xfd, 0x15, 0xff, 0xd5, 0x2f, 0xff, 0xff, 0xaa, 0xa6, 0x96, 0x56, 0x55, 0x55, 0x55, 0x40, 0x00, 0x00, 0x00, 0x05, 0x50, 0x01, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x55, 0x5a, 0x69, 0xa9, 0x56, 0xaa, 0xaa, 0xab, 0xfa, 0xaa, 0xf9, 0x01, 0xff, 0xd5, 0x2f, 0xff, 0xff, 0xfa, 0xa9, 0x96, 0x56, 0x55, 0x55, 0x54, 0x00, 0x00, 0x44, 0x00, 0x05, 0x40, 0x01, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x55, 0x6a, 0x59, 0xa9, 0x56, 0xaa, 0xaa, 0xab, 0xea, 0xbf, 0xfd, 0x00, 0xff, 0xd5, 0x1f, 0xff, 0xff, 0xfa, 0xa9, 0x59, 0x5a, 0x55, 0x55, 0x55, 0x04, 0x54, 0x51, 0x00, 0x01, 0x50, 0x15, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x15, 0xa5, 0x55, 0xa5, 0x5a, 0xaa, 0xaa, 0xaa, 0xaa, 0xfb, 0xfd, 0x00, 0xff, 0x95, 0x1f, 0xff, 0xff, 0xfa, 0xa9, 0x5a, 0xa9, 0x55, 0x55, 0x54, 0x55, 0x55, 0x54, 0x00, 0x05, 0x54, 0x15, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x56, 0xa5, 0x55, 0x55, 0x59, 0x6a, 0xaa, 0xaa, 0xab, 0xff, 0xf9, 0x00, 0xbf, 0x95, 0x1f, 0xff, 0xff, 0xfa, 0xaa, 0xaa, 0xa5, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00, 0x05, 0x50, 0x55, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x55, 0x56, 0x95, 0x55, 0x55, 0x69, 0x6a, 0xaa, 0x9a, 0xab, 0xff, 0xfe, 0x01, 0xbf, 0xe5, 0x1f, 0xff, 0xff, 0xfa, 0xa9, 0xa9, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x45, 0x05, 0x50, 0x5a, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x55, 0x55, 0x95, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xaf, 0xfe, 0xba, 0xfd, 0x01, 0xbf, 0xe5, 0x4f, 0xff, 0xff, 0xfa, 0xa9, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x15, 0x55, 0x5a, 0xaf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x55, 0x55, 0x59, 0x55, 0x55, 0x56, 0xaa, 0xaa, 0xaf, 0xff, 0xbf, 0xfd, 0x01, 0x7f, 0xe5, 0x4b, 0xff, 0xff, 0xff, 0xea, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0xa9, 0x59, 0x55, 0x55, 0x65, 0x6a, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xa5, 0x55, 0x55, 0x55, 0x59, 0x56, 0xaa, 0xaa, 0xaa, 0xaf, 0xaa, 0xfd, 0x05, 0xff, 0xe4, 0x0b, 0xff, 0xff, 0xff, 0xfa, 0x65, 0xa5, 0x55, 0x55, 0x55, 0x5a, 0xba, 0xaa, 0xaa, 0x96, 0xaa, 0xab, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xa5, 0x55, 0x55, 0x55, 0x56, 0xa6, 0x5a, 0xaa, 0xaa, 0xbe, 0xaa, 0xa9, 0x05, 0xbf, 0xe4, 0x4f, 0xff, 0xff, 0xfa, 0xfe, 0xa9, 0xa5, 0x55, 0x55, 0x55, 0xab, 0xff, 0xff, 0xaa, 0x9a, 0xaa, 0xaf, 0xff, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x06, 0xa5, 0x55, 0x55, 0x55, 0x56, 0xaa, 0x5a, 0xaa, 0xaa, 0xba, 0xaa, 0xbd, 0x00, 0x2f, 0xe9, 0x4b, 0xff, 0xff, 0xfa, 0xee, 0xaa, 0x95, 0x55, 0xa5, 0x5a, 0xaf, 0xff, 0xff, 0xfe, 0xaa, 0xaa, 0xbf, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x56, 0xa9, 0x69, 0x55, 0x55, 0x56, 0x95, 0x55, 0xaa, 0x9a, 0xaa, 0xaa, 0xad, 0x00, 0x1b, 0xe8, 0x4b, 0xff, 0xff, 0xea, 0xaa, 0xaa, 0x96, 0x56, 0xaa, 0xaa, 0xbf, 0xff, 0xff, 0xff, 0xab, 0xbf, 0xff, 0xff, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x5a, 0x55, 0x55, 0x55, 0x55, 0x5a, 0x95, 0x56, 0xa6, 0x6a, 0xaa, 0xaa, 0xa5, 0x00, 0x0b, 0xe8, 0x4f, 0xff, 0xff, 0xfa, 0xea, 0xaa, 0xaa, 0x9a, 0xaa, 0xaa, 0xbf, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 0x55, 0x55, 0x56, 0x55, 0x55, 0x6a, 0xa5, 0x5a, 0x5a, 0x5a, 0xaa, 0xaa, 0xa4, 0x00, 0x07, 0xe4, 0x4b, 0xff, 0xff, 0xfa, 0xab, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x01, 0x00, 0x50, 0x15, 0x95, 0x55, 0x55, 0x55, 0x55, 0x5a, 0xa5, 0xaa, 0x5a, 0x6a, 0xaa, 0xaa, 0xa9, 0x10, 0x06, 0x94, 0x0b, 0xff, 0xff, 0xbe, 0xaf, 0xab, 0xaa, 0xaa, 0xab, 0xeb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x01, 0x01, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x56, 0x96, 0xaa, 0xaa, 0x5a, 0xaa, 0xaa, 0x95, 0x00, 0x02, 0x94, 0x0b, 0xae, 0xbe, 0xaa, 0xaa, 0xab, 0xfa, 0xaa, 0xab, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x55, 0x55, 0x65, 0x55, 0x55, 0x55, 0x55, 0x55, 0x56, 0x9a, 0xaa, 0xaa, 0x5a, 0xaa, 0xaa, 0x89, 0x00, 0x02, 0xa4, 0x16, 0xaa, 0xae, 0xbe, 0xea, 0xaf, 0xff, 0xaa, 0xaf, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x55, 0x55, 0x55, 0x65, 0x55, 0x55, 0x55, 0x55, 0x55, 0x56, 0x9a, 0xaa, 0xaa, 0x5a, 0xae, 0xaa, 0x85, 0x00, 0x02, 0x90, 0x01, 0x6a, 0xaf, 0xbf, 0xfa, 0xbf, 0xff, 0xef, 0xfa, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x69, 0x55, 0x6a, 0x95, 0x55, 0x55, 0x55, 0x55, 0x55, 0x5a, 0x56, 0xaa, 0xaa, 0x4a, 0xfe, 0xfa, 0x85, 0x00, 0x02, 0x94, 0x02, 0x6a, 0xaa, 0xbf, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x5a, 0xaa, 0xaa, 0x55, 0x55, 0x55, 0x55, 0xaa, 0x69, 0x6a, 0x66, 0xaa, 0xaa, 0x4a, 0xfb, 0xaa, 0x45, 0x00, 0x02, 0xd4, 0x06, 0x69, 0xae, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x1a, 0xaa, 0x55, 0x55, 0x55, 0x55, 0x56, 0xaa, 0xaa, 0xaa, 0x56, 0xaa, 0xaa, 0x4b, 0xbf, 0xaa, 0x80, 0x00, 0x01, 0xd4, 0x02, 0x9a, 0xff, 0x6f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x1a, 0xaa, 0xa9, 0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xa6, 0x55, 0x6a, 0xaa, 0x4b, 0xff, 0xa9, 0x40, 0x00, 0x01, 0xd4, 0x01, 0x55, 0x6e, 0x2b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0x05, 0x45, 0x6a, 0x9a, 0xa5, 0x55, 0x55, 0x15, 0x55, 0xaa, 0xaa, 0xaa, 0x5a, 0xaa, 0xbe, 0x4b, 0xfb, 0x90, 0x40, 0x00, 0x06, 0x94, 0x02, 0x99, 0xae, 0x2f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xa5, 0x15, 0x55, 0x55, 0x5a, 0x55, 0x55, 0x55, 0x51, 0x56, 0xaa, 0xaa, 0xaa, 0xaa, 0xaa, 0xae, 0x4b, 0xaa, 0x54, 0x40, 0x00, 0x06, 0x94, 0x02, 0x99, 0xae, 0x2f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xaa, 0x15, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x51, 0x5a, 0xaa, 0xbf, 0xaa, 0xaa, 0xaa, 0xae, 0x4b, 0xaa, 0x54, 0x00, 0x00, 0x01, 0x98, 0x02, 0x90, 0xaa, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xaa, 0x45, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x5a, 0xaa, 0xbf, 0xfa, 0xab, 0xaa, 0xaa, 0x5b, 0xaa, 0x44, 0x00, 0x00, 0x01, 0x98, 0x02, 0xa1, 0xae, 0x2f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xaa, 0x15, 0x55, 0x55, 0x55, 0x55, 0xa9, 0x55, 0x95, 0x5a, 0xfa, 0xbf, 0xfa, 0xab, 0xea, 0xae, 0x4b, 0xaa, 0x40, 0x00, 0x10, 0x00, 0x54, 0x02, 0xa0, 0xfa, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xea, 0x95, 0x55, 0x55, 0x55, 0x55, 0xaa, 0xaa, 0xfa, 0xaf, 0xfe, 0xff, 0xfe, 0xaf, 0xfe, 0xae, 0x0b, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x50, 0x01, 0x94, 0xbf, 0x1f, 0xff, 0xff, 0xff, 0xfe, 0xbb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xea, 0xfa, 0x69, 0x65, 0x55, 0x56, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xee, 0x1b, 0xaa, 0x40, 0x00, 0x00, 0x01, 0x94, 0x01, 0xa5, 0xae, 0x0b, 0xff, 0xff, 0xff, 0xfa, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0xbf, 0xff, 0xb9, 0x55, 0x6a, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xeb, 0xee, 0x16, 0xba, 0x40, 0x00, 0x00, 0x00, 0x54, 0x40, 0x91, 0x6e, 0x07, 0xff, 0xff, 0xbe, 0xff, 0xba, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xfe, 0xaa, 0xab, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xaa, 0x06, 0xaa, 0x80, 0x00, 0x00, 0x00, 0x90, 0x00, 0x90, 0x19, 0x07, 0xff, 0xfe, 0xaa, 0xaf, 0xaa, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xef, 0xeb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xaa, 0x06, 0xaa, 0x40, 0x00, 0x00, 0x00, 0x90, 0x00, 0x90, 0x04, 0x07, 0xff, 0xfe, 0xbb, 0xff, 0xae, 0xeb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xad, 0x06, 0xae, 0x40, 0x04, 0x00, 0x00, 0x40, 0x01, 0x50, 0x05, 0x03, 0xff, 0xff, 0xeb, 0xff, 0xfe, 0xab, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xbd, 0x06, 0xaa, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x05, 0x02, 0xff, 0xea, 0xef, 0xff, 0xff, 0xaf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x99, 0x06, 0xa5, 0x44, 0x40, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01, 0x07, 0xeb, 0xef, 0xef, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x99, 0x06, 0x91, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x02, 0xeb, 0xef, 0xef, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x69, 0x06, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x05, 0x02, 0xeb, 0xab, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf5, 0x55, 0x01, 0x94, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x05, 0x02, 0xff, 0xeb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf5, 0x54, 0x01, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xeb, 0xaa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf5, 0x55, 0x00, 0x40, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xaa, 0xab, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf5, 0x45, 0x01, 0x40, 0x40, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xaa, 0x9b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf5, 0x40, 0x01, 0x01, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x06, 0xaa, 0x5a, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfa, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf5, 0x01, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0xa5, 0x55, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xea, 0xbb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf5, 0x00, 0x10, 0x11, 0x40, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x05, 0xbf, 0xff, 0xff, 0xff, 0xbf, 0xea, 0xaa, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf5, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa1, 0x55, 0x7f, 0xff, 0xff, 0xff, 0xfe, 0xaa, 0xaa, 0xab, 0xff, 0xff, 0xff, 0xff, 0xfa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf5, 0x44, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa1, 0x56, 0x6f, 0xff, 0xff, 0xff, 0xba, 0xaa, 0xaa, 0xaa, 0xff, 0xff, 0xff, 0xff, 0xaa, 0xaf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf5, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0xa0, 0x05, 0x3f, 0xff, 0xff, 0xff, 0xaa, 0x56, 0xaa, 0xaa, 0xff, 0xff, 0xff, 0xff, 0xaa, 0xab, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf5, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0xa0, 0x14, 0x7f, 0xff, 0xff, 0xff, 0xaa, 0x5a, 0xaa, 0xaa, 0xaf, 0xff, 0xff, 0xff, 0xaa, 0xae, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf5, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xa0, 0x14, 0x7f, 0xff, 0xff, 0xff, 0xaa, 0xaa, 0xaa, 0xaa, 0xaf, 0xff, 0xff, 0xff, 0xa9, 0xbb, 0xab, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x54, 0x50, 0x7f, 0xff, 0xff, 0xfe, 0xaa, 0x9a, 0xaa, 0xab, 0xab, 0xff, 0xff, 0xff, 0xaa, 0xba, 0xaa, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x2f, 0xff, 0xff, 0xfa, 0xa6, 0xa9, 0x6a, 0xab, 0xef, 0xff, 0xff, 0xff, 0x5a, 0x6a, 0xae, 0xab, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x3f, 0xff, 0xff, 0xaa, 0x9a, 0xaa, 0x9a, 0xab, 0xbf, 0xff, 0xff, 0xff, 0x55, 0x06, 0xae, 0xaa, 0xaf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe4, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x45, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x40, 0x2f, 0xff, 0xff, 0xaa, 0x9a, 0xaa, 0x6a, 0xaa, 0xbf, 0xff, 0xff, 0xff, 0x00, 0x02, 0xab, 0xaa, 0xaa, 0xbf, 0xff, 0xfa, 0xaf, 0xff, 0xff, 0xff, 0xff, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x54, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x2f, 0xef, 0xff, 0xaa, 0x6a, 0xa9, 0xaa, 0xaa, 0xbf, 0xff, 0xff, 0xff, 0x00, 0x00, 0x5b, 0xaa, 0xaa, 0xbf, 0xff, 0xea, 0xaf, 0xff, 0xff, 0xff, 0xff, 0xf4, 0x00, 0x00, 0x00, 0x01, 0x50, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0xff, 0xfe, 0xaa, 0xaa, 0x95, 0xaa, 0xaa, 0xaa, 0xff, 0xff, 0xff, 0x00, 0x00, 0x06, 0xaa, 0xaa, 0xaf, 0xea, 0xaa, 0xaa, 0xff, 0xff, 0xff, 0xff, 0xf4, 0x40, 0x10, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x50, 0x6f, 0xff, 0xff, 0xa5, 0x5a, 0xa6, 0xaa, 0x9a, 0xab, 0xff, 0xff, 0xff, 0x00, 0x00, 0x01, 0x9a, 0xaa, 0xab, 0xaa, 0xaa, 0xaa, 0xbf, 0xff, 0xff, 0xff, 0xf4, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x40, 0x00, 0x00, 0x01, 0x54, 0x6f, 0xff, 0xea, 0xa5, 0x6a, 0xa6, 0xaa, 0x5a, 0xaf, 0xaf, 0xff, 0xff, 0x00, 0x00, 0x00, 0xaa, 0xa6, 0x6b, 0xe9, 0xaa, 0xaa, 0xaa, 0xbf, 0xff, 0xff, 0xf4, 0x50, 0x50, 0x00, 0x00, 0x00, 0x00, 0x40, 0x14, 0x00, 0x00, 0x00, 0x00, 0x01, 0x54, 0x6f, 0xff, 0xfa, 0xa6, 0x9a, 0x9a, 0x65, 0x5a, 0xae, 0xaf, 0xff, 0xea, 0x00, 0x00, 0x00, 0x6a, 0xa5, 0xaa, 0xba, 0x55, 0x6a, 0xaa, 0xab, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x6b, 0xff, 0xea, 0xaa, 0x5a, 0x99, 0x55, 0x5a, 0xaa, 0xaa, 0xfa, 0x55, 0x00, 0x00, 0x00, 0x1a, 0xa9, 0x6a, 0xab, 0x95, 0x5a, 0x9a, 0xaa, 0xff, 0xff, 0xf0, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6b, 0xfe, 0xa9, 0x6a, 0x6a, 0x59, 0x55, 0x55, 0x5a, 0xaa, 0x90, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x69, 0x6a, 0xab, 0xf5, 0x5a, 0x55, 0x9a, 0xbf, 0xff, 0xf0, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6a, 0xba, 0xa5, 0x55, 0xaa, 0x65, 0x65, 0x55, 0x45, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x59, 0x5a, 0xaa, 0xfe, 0x5a, 0x55, 0x5a, 0xaa, 0xbf, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x6a, 0xaa, 0x95, 0x6a, 0xa9, 0x65, 0x94, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x55, 0x5a, 0xaa, 0xbe, 0x96, 0x55, 0xa5, 0xaa, 0xa7, 0xe0, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x40, 0x6a, 0xa9, 0x55, 0x6a, 0x55, 0xa9, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x59, 0xaa, 0xaa, 0x91, 0x96, 0xa9, 0x56, 0xaa, 0xf0, 0x00, 0x05, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6a, 0xa6, 0x95, 0x95, 0x56, 0xae, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x9a, 0xaa, 0xae, 0x91, 0x56, 0xa9, 0x65, 0xaa, 0xf0, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6a, 0xa5, 0x6a, 0xaa, 0xaa, 0xa5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x9a, 0xaa, 0xaa, 0x91, 0x56, 0x69, 0xa5, 0x55, 0xf0, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x6a, 0x95, 0x5a, 0x9a, 0xa9, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xaa, 0xaa, 0xab, 0x91, 0x55, 0x6a, 0x55, 0x55, 0x50, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x2a, 0x95, 0x55, 0x95, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xaa, 0xaa, 0xaf, 0x91, 0x15, 0x6a, 0xa5, 0x55, 0x50, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x1a, 0x65, 0xa6, 0x55, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xaa, 0xaa, 0xab, 0xc0, 0x15, 0x55, 0x95, 0x55, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x15, 0x66, 0xa9, 0x55, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0xaa, 0xaa, 0x80, 0x15, 0x55, 0x59, 0x55, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x1a, 0x5a, 0x65, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x66, 0xaa, 0x00, 0x15, 0x56, 0xaa, 0x95, 0x40, 0x00, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x05, 0x6a, 0x55, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x11, 0xaa, 0x80, 0x19, 0x6a, 0xaa, 0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x69, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xaa, 0x40, 0x19, 0xaa, 0x99, 0x54, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xaa, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x40, 0x15, 0xaa, 0x55, 0x94, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x40, 0x15, 0xaa, 0x54, 0x40, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x40, 0x05, 0x9a, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x55, 0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x55, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x05, 0x55, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x01, 0x55, 0x55, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x65, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x55, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x01, 0x56, 0x55, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x14, 0x41, 0x55, 0xa5, 0x55, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x50, 0x05, 0x55, 0x55, 0x55, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x04, 0x00, 0x50, 0x15, 0x45, 0x54, 0x14, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x05, 0x10, 0x55, 0x51, 0x55, 0x55, 0x55, 0x50, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x55, 0x55, 0x50, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x55, 0xa6, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x41, 0x55, 0x55, 0x55, 0x95, 0xa9, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x54, 0x00, 0x00, 0x00, 0x00, 0x01, 0x55, 0x55, 0x55, 0x56, 0x51, 0x54, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x41, 0x54, 0x00, 0x00, 0x01, 0x55, 0x55, 0x55, 0x55, 0x90, 0x44, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x15, 0x00, 0x40, 0x15, 0xa5, 0x55, 0x55, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x01, 0x55, 0xaa, 0x55, 0x6a, 0x95, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x05, 0x55, 0x55, 0x51, 0x96, 0x5a, 0x6a, 0x55, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x40, 0x55, 0x55, 0x50, 0x55, 0x55, 0x19, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x54, 0x01, 0x00, 0x00, 0x45, 0x15, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x50, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x55, 0x14, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x69, 0x51, 0x55, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x15, 0x5a, 0xa5, 0x55, 0x51, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x15, 0x6a, 0xb9, 0x55, 0x14, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x51, 0x00, 0x00, 0x01, 0x00, 0xaa, 0xaa, 0xa5, 0x55, 0x55, 0x50, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x05, 0x5a, 0x69, 0x56, 0x69, 0x59, 0x45, 0xa6, 0xaa, 0xa6, 0x95, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x15, 0x55, 0x55, 0x95, 0x59, 0x59, 0x55, 0x5b, 0xcf, 0xee, 0xba, 0x95, 0xa5, 0x55, 0x95, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x15, 0x55, 0x95, 0x55, 0x56, 0x65, 0x95, 0xaa, 0x4a, 0xaa, 0xba, 0xaa, 0xaa, 0xa5, 0x55, 0x54, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01, 0x41, 0x55, 0x6a, 0xaa, 0xa6, 0xa9, 0xab, 0xae, 0xfa, 0x96, 0xaa, 0xaa, 0xaa, 0xaa, 0x55, 0x55, 0x55, 0x55, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x55, 0x01, 0x55, 0x55, 0x5b, 0xfe, 0xaa, 0xaa, 0xaa, 0xa6, 0x96, 0xaa, 0x56, 0xa5, 0x55, 0x55, 0x51, 0x55, 0x40, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x56, 0xaa, 0xaa, 0xaa, 0xaf, 0xff, 0xea, 0xa5, 0x55, 0x6a, 0xaa, 0xaa, 0x56, 0x55, 0x65, 0x6a, 0x50, 0x45, 0x55, 0x55, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x55, 0xbe, 0xaf, 0xe5, 0x59, 0x5a, 0xba, 0xff, 0xea, 0xff, 0xaf, 0xaa, 0xaa, 0xa5, 0x55, 0x55, 0x40, 0x55, 0x55, 0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x55, 0x55, 0x55, 0x50, 0x00, 0x01, 0xaa, 0xef, 0xea, 0xfa, 0xaf, 0xeb, 0xfe, 0xfa, 0x95, 0x59, 0x40, 0x15, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x55, 0x54, 0x00, 0x00, 0x00, 0x5a, 0xaa, 0xaa, 0xaa, 0xff, 0xff, 0xfa, 0xaa, 0xa9, 0x55, 0x00, 0x15, 0x41, 0x55, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x06, 0xbe, 0xaa, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xea, 0x95, 0x00, 0x15, 0x50, 0x41, 0x69, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0x6a, 0xbe, 0xff, 0x6f, 0xff, 0xbf, 0xff, 0xe9, 0x40, 0x16, 0x5a, 0xab, 0xe4, 0x40, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0xaa, 0xaa, 0xff, 0x8f, 0xff, 0xaf, 0xff, 0xeb, 0x40, 0x2a, 0xaf, 0xfa, 0xa9, 0xaa, 0x55, 0x69, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xbf, 0xff, 0xbf, 0xff, 0x4b, 0xff, 0xaa, 0xff, 0xff, 0x40, 0x1e, 0xfe, 0xa5, 0x54, 0xba, 0xaa, 0x9a, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0xfb, 0xff, 0xff, 0x4b, 0xff, 0xff, 0xfa, 0xfe, 0x00, 0x0a, 0x95, 0x15, 0x51, 0x95, 0x46, 0xf9, 0xb9, 0x50, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xd6, 0xaa, 0xaa, 0x07, 0xbf, 0xff, 0xaa, 0xaa, 0x40, 0x00, 0x09, 0x54, 0x55, 0x15, 0x00, 0x55, 0x90, 0x15, 0x40, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x45, 0x7f, 0x55, 0x02, 0xbf, 0xff, 0xff, 0xfa, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x01, 0x50, 0x45, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0x55, 0x02, 0xff, 0xaa, 0xaa, 0x95, 0x00, 0x00, 0x00, 0x40, 0x00, 0x01, 0x00, 0x00, 0x10, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x55, 0x55, 0x55, 0x51, 0x55, 0x55, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x45, 0x1d, 0x55, 0x54, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x04, 0x01, 0x40, 0x40, 0x00 },
    };
};
